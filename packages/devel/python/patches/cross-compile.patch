diff --git a/setup.py b/setup.py
index 174ce720c802..b97672406940 100644
--- a/setup.py
+++ b/setup.py
@@ -61,6 +61,22 @@ def add_dir_to_list(dirlist, dir):
             return
     dirlist.insert(0, dir)
 
+def compiler_sysroot():
+    cppflags = sysconfig.get_config_var('CPPFLAGS')
+    m = re.search(r'--sysroot\s+(\S+)', cppflags)
+    if m:
+        return m.group(1)
+
+    return None
+
+def linker_sysroot():
+    ldflags = sysconfig.get_config_var('LDFLAGS')
+    m = re.search(r'--sysroot\s+(\S+)', ldflags)
+    if m:
+        return m.group(1)
+
+    return None
+
 def macosx_sdk_root():
     """
     Return the directory of the current OSX SDK,
@@ -128,6 +144,8 @@ def find_library_file(compiler, libname, std_dirs, paths):
 
     if host_platform == 'darwin':
         sysroot = macosx_sdk_root()
+    else:
+        sysroot = linker_sysroot()
 
     # Check whether the found file is in one of the standard directories
     dirname = os.path.dirname(result)
@@ -154,6 +172,9 @@ def find_library_file(compiler, libname, std_dirs, paths):
             #   /usr/lib/libedit.dylib
             if os.path.join(sysroot, p[1:]) == dirname:
                 return [ ]
+        elif sysroot:
+            if os.path.join(sysroot, p[1:]) == dirname:
+                return [ ]
 
         if p == dirname:
             return [ ]
@@ -167,6 +188,9 @@ def find_library_file(compiler, libname, std_dirs, paths):
         if host_platform == 'darwin' and is_macosx_sdk_path(p):
             if os.path.join(sysroot, p[1:]) == dirname:
                 return [ p ]
+        elif sysroot:
+            if os.path.join(sysroot, p[1:]) == dirname:
+                return [ p ]
 
         if p == dirname:
             return [p]
@@ -455,9 +479,11 @@ class PyBuildExt(build_ext):
             os.makedirs(self.build_temp)
         ret = os.system('%s -E -v - </dev/null 2>%s 1>/dev/null' % (gcc, tmpfile))
         is_gcc = False
+        sysroot = linker_sysroot()
         in_incdirs = False
         inc_dirs = []
         lib_dirs = []
+
         try:
             if ret >> 8 == 0:
                 with open(tmpfile) as fp:
@@ -468,7 +494,7 @@ class PyBuildExt(build_ext):
                             in_incdirs = True
                         elif line.startswith("End of search list"):
                             in_incdirs = False
-                        elif is_gcc and line.startswith("LIBRARY_PATH"):
+                        elif is_gcc and not sysroot and line.startswith("LIBRARY_PATH"):
                             for d in line.strip().split("=")[1].split(":"):
                                 d = os.path.normpath(d)
                                 if '/gcc/' not in d:
@@ -534,7 +560,8 @@ class PyBuildExt(build_ext):
                         add_dir_to_list(dir_list, directory)
 
         if os.path.normpath(sys.base_prefix) != '/usr' \
-                and not sysconfig.get_config_var('PYTHONFRAMEWORK'):
+                and not sysconfig.get_config_var('PYTHONFRAMEWORK') \
+                and not cross_compiling:
             # OSX note: Don't add LIBDIR and INCLUDEDIR to building a framework
             # (PYTHONFRAMEWORK is set) to avoid # linking problems when
             # building a framework with different architectures than
@@ -555,7 +582,21 @@ class PyBuildExt(build_ext):
             inc_dirs = self.compiler.include_dirs + ['/usr/include']
         else:
             lib_dirs = self.compiler.library_dirs[:]
+            lib_dir = sysconfig.get_config_var("LIBDIR")
+            sysroot = linker_sysroot()
+            if sysroot:
+                add_dir_to_list(lib_dirs, os.path.join(sysroot, lib_dir[1:]))
+            else:
+                add_dir_to_list(lib_dirs, sysconfig.get_config_var("LIBDIR"))
+
             inc_dirs = self.compiler.include_dirs[:]
+            inc_dir = sysconfig.get_config_var("INCLUDEDIR")
+            sysroot = compiler_sysroot()
+            if sysroot:
+                add_dir_to_list(inc_dirs, os.path.join(sysroot, inc_dir[1:]))
+            else:
+                add_dir_to_list(inc_dirs, inc_dir)
+
         exts = []
         missing = []
 
